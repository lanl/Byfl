#! /bin/bash

######################################
# Automatically do a clean build of  #
# LLVM trunk, Clang trunk, DragonEgg #
# trunk and then of Byfl head        #
#                                    #
# By Scott Pakin <pakin@lanl.gov>    #
######################################

# Ensure we have a version of bash that can parse the rest of this
# file (specifically, the coproc statement).
if [ `echo $BASH_VERSION | sed -e 's/\..*//'` -lt 4 ] ; then
    echo "${0}: This script requires bash version 4+; you're running version $BASH_VERSION" 1>&2;
    exit 1
fi

# Define a function to work around OS X's lack of "readlink -f".
function abs_dirname() {
  somedir=`echo "$1/" | sed 's,//*,/,g'`
  mkdir -p "$somedir"
  (cd "${somedir%/*}" && pwd -P)
}

# Determine where to build, where to install, and how many processes to use.
gui=yes
download=yes
compile=yes
compile_byfl_only=no
llvm_revision=HEAD
while getopts j:b:r:tdcC opt; do
    case $opt in
        j)
            # Parallelism
            numprocs="$OPTARG"
            ;;

        b)
            # Build directory
            builddir="$OPTARG"
            ;;
        r)
            # LLVM/Clang/DragonEgg revision to use
            llvm_revision="$OPTARG"
            ;;
        t)
            # Show progress textually
            gui=no
            ;;
        d)
            # Download only
            download=yes
            compile=no
            ;;
        C)
            # Compile byfl only
            compile_byfl_only=yes
            compile=no
            download=no
            ;;
        c)
            # Compile only
            compile=yes
            download=no
            ;;
    esac
done
shift $((OPTIND-1))
if [ -z "$1" ] ; then
    echo "Usage: $0 [-j <parallelism> [-b <build_dir>] [-t] [-d | -c | -C] <install_dir>" >&2
    exit 1
fi
if [ -z "$builddir" ] ; then
    builddir=$(mktemp --directory --tmpdir=$(/bin/pwd) byfl-build.XXXXXX)
fi
builddir=`abs_dirname "$builddir"`
installdir=`abs_dirname "$1"`
if [ -z "$numprocs" ] ; then
    # No parallel-build factor was specified -- guess a good value to use.
    if [ -e /proc/cpuinfo ] ; then
        # Linux -- get the CPU count from /proc/cpuinfo.
        numprocs=`cat /proc/cpuinfo | egrep -c '^processor'`
    else
        # OS X or other -- disable implicit parallel builds.
        numprocs=1
    fi
fi

# Honor the user's preferred C and C++ compilers.
CC=${CC:-gcc}
CXX=${CXX:-g++}

# Ensure we have a version of GCC that works with DragonEgg.
gcc_version=`$CC --version | awk 'NR==1 {sub(/\([^\)]*\)/, ""); print $2}'`
if `echo $gcc_version | awk '!/^4\.[5-8]\./ {exit 1}'` ; then
    :
else
    echo "${0}: DragonEgg requires GCC version 4.5, 4.6, 4.7, or 4.8; version $gcc_version almost certainly won't work" 1>&2
    exit 1
fi
if [ `$CC -print-file-name=plugin` = plugin ] ; then
    echo "${0}: DragonEgg requires the GCC plugin development files (e.g., auto-host.h) corresponding to `$CC --version | head -1`" 1>&2
    exit 1
fi

# Prepare the GUI.
if [ "$gui" = yes ] ; then
    if [ ! `type -P stdbuf` ] ; then
        gui=no
    elif [ ! `type -P zenity` ] ; then
        gui=no
    fi
fi
if [ "$gui" = yes ] ; then
    coproc zproc {
	zenity --progress --title="Byfl installation progress" --auto-kill
    }
    while [ -z "$zenity_pid" ] ; do
        zenity_pid=`ps | awk '$NF == "zenity" {print $1}'`
        sleep 1
    done
    function abend () {
        test -z "$zproc_PID" || kill $zproc_PID
        zenity --error --title="Fail" --text="Installation failed."
        exit 1
    }
    trap abend ERR
else
    zproc=(0, 1)
fi
exec 4>&${zproc[1]}

# Define a function to update a progress bar during command execution
# given a symbolic tag for the run, the expected number of lines of
# output, and a command to run.
function run_with_progress () {
    # Parse our arguments.
    tag="$1"
    shift
    maxlines="$1"
    shift

    # Run the command either with or without the GUI.  Abort on error.
    logfile="$builddir/build-logs/$tag.log"
    if [ "$gui" = yes ] ; then
        # Estimate the number of lines of output we'll see.
        echo 0 1>&4
        "$@" 2>&1 | \
            tee $logfile | \
            stdbuf -oL awk '{printf "%d\n", 100*NR/MAXLN; print > "/dev/stderr"}' MAXLN=$maxlines | \
            stdbuf -oL uniq 1>&4
        echo 100 1>&4
    else
        "$@"
    fi
    if [ "${PIPESTATUS[0]}" != 0 ] ; then
        echo "${0}: Execution of \"$@\" failed (${PIPESTATUS[0]})" 1>&2
        false
        exit 1
    fi
}

# Abort on error.
set -o pipefail
set -e

# Switch to our build directory
test -e "$builddir" || mkdir "$builddir"
cd "$builddir"

# Create a subdirectory for logging the script's operation.
rm -rf build-logs
mkdir build-logs

# Download LLVM, Clang, DragonEgg, and Byfl.
if [ "$download" = yes ] ; then
    # Delete old files before downloading the new ones.
    echo "# Removing old versions of LLVM, Clang, DragonEgg, and Byfl from $builddir" 1>&4
    run_with_progress cleanup 70000 rm -rfv byfl dragonegg llvm

    # Download LLVM trunk.
    echo "# Downloading LLVM into $builddir" 1>&4
    run_with_progress llvm-dl 12000 svn checkout -r $llvm_revision http://llvm.org/svn/llvm-project/llvm/trunk llvm
    cd llvm
    llvm_revision=`svn info | awk '/^Revision: / {print $2}'`
    cd ..

    # Download Clang.
    echo "# Downloading Clang revision $llvm_revision into $builddir" 1>&4
    run_with_progress clang-dl 9100 svn checkout -r $llvm_revision http://llvm.org/svn/llvm-project/cfe/trunk llvm/tools/clang

    # Download the Clang run-time system.
    echo "# Downloading Clang RT revision $llvm_revision into $builddir" 1>&4
    run_with_progress rts-dl 1300 svn checkout -r $llvm_revision http://llvm.org/svn/llvm-project/compiler-rt/trunk llvm/projects/compiler-rt

    # Download DragonEgg.
    echo "# Downloading DragonEgg revision $llvm_revision into $builddir" 1>&4
    run_with_progress dregg-dl 400 svn checkout -r $llvm_revision http://llvm.org/svn/llvm-project/dragonegg/trunk dragonegg

    # Download Byfl.
    echo "# Downloading Byfl into $builddir" 1>&4
    run_with_progress byfl-dl 1 git clone https://github.com/losalamos/Byfl.git byfl

    # Say what we did.
    echo "Downloaded LLVM, Clang, DragonEgg, and Byfl into $builddir."
    if [ "$gui" = yes -a "$compile" = no ] ; then
        kill $zenity_pid
        zenity --info --title="Finished downloading" --text="Downloaded LLVM, Clang, DragonEgg,\nand Byfl into $builddir."
    fi
fi

if [ "$compile_byfl_only" = yes ]; then
	cd byfl/build
	
    # Build Byfl.
    echo "# Compiling Byfl" 1>&4
    run_with_progress byfl-build 35 make -j$numprocs

    # Install Byfl.
    echo "# Installing Byfl into $installdir" 1>&4
    run_with_progress byfl-inst 73 make install

    # Test the installation
    echo "# Testing the Byfl installation" 1>&4
    test "$gui" = yes && echo 0 1>&4
    byflperllib=$(dirname $(find $installdir/share -name ParseGccOpts.pm))
    cfile=`mktemp --tmpdir --suffix=.c byfltest-XXXXXX`
    exefile=`echo $cfile | sed 's/\.c$//'`
    cat <<CFILE > $cfile
#include <stdio.h>
int main (void) {
  printf("Hello, world!\n");
  return 0;
}
CFILE
    export PERL5LIB=${byflperllib}:$PERL5LIB
    bf-gcc $cfile -o $exefile
    run_with_progress byfl-test 21 $exefile
    rm -f $cfile $exefile

    # Say what we did.
    echo "Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir."
    echo "It is now safe to delete $builddir."
    echo "Don't forget to add $byflperllib to your PERL5LIB variable."
    if [ "$gui" = yes ] ; then
        kill $zenity_pid
        zenity --info --title="Finished installation" --text="Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir.\n\nIt is now safe to delete $builddir.\nDon't forget to add $byflperllib to your PERL5LIB variable."
    fi
fi

# Compile and install everything we downloaded.
if [ "$compile" = yes ] ; then
    # Configure LLVM and Clang.
    echo "# Configuring LLVM and Clang" 1>&4
    cd llvm
    run_with_progress llvm-config 650 ./configure --prefix="$installdir" --enable-optimized --enable-debug-runtime --enable-debug-symbols --disable-assertions CC="$CC" CXX="$CXX" REQUIRES_RTTI=1

    # Build LLVM and Clang.
    echo "# Compiling LLVM and Clang" 1>&4
    run_with_progress llvm-build 3100 make -j$numprocs

    # Install LLVM and Clang.
    echo "# Installing LLVM and Clang into $installdir" 1>&4
    run_with_progress llvm-inst 750 make install

    # Build DragonEgg.
    export PATH=$installdir/bin:$PATH
    cd ../dragonegg
    echo "# Compiling DragonEgg" 1>&4
    run_with_progress dregg-build 41 make -j$numprocs

    # Install DragonEgg.
    echo "# Installing DragonEgg into $installdir" 1>&4
    run_with_progress dregg-inst 1 cp -v dragonegg.so $installdir/lib

    # Configure Byfl.
    echo "# Configuring Byfl" 1>&4
    cd ../byfl/autoconf
    (echo $builddir_llvm ; echo $builddir_llvm) | ./AutoRegen.sh
    test -e ../build || mkdir ../build
    cd ../build
    run_with_progress byfl-config 340 ../configure --disable-assertions --enable-optimized --enable-debug-runtime --enable-debug-symbols DRAGONEGG="$installdir/lib/dragonegg.so" CXX="$CXX" CXXFLAGS="-g -O2 -std=c++0x" --with-llvmsrc="$builddir/llvm" --with-llvmobj="$builddir/llvm" --prefix="$installdir"

    # Build Byfl.
    echo "# Compiling Byfl" 1>&4
    run_with_progress byfl-build 35 make -j$numprocs

    # Install Byfl.
    echo "# Installing Byfl into $installdir" 1>&4
    run_with_progress byfl-inst 73 make install

    # Test the installation
    echo "# Testing the Byfl installation" 1>&4
    test "$gui" = yes && echo 0 1>&4
    byflperllib=$(dirname $(find $installdir/share -name ParseGccOpts.pm))
    cfile=`mktemp --tmpdir --suffix=.c byfltest-XXXXXX`
    exefile=`echo $cfile | sed 's/\.c$//'`
    cat <<CFILE > $cfile
#include <stdio.h>
int main (void) {
  printf("Hello, world!\n");
  return 0;
}
CFILE
    export PERL5LIB=${byflperllib}:$PERL5LIB
    bf-gcc $cfile -o $exefile
    run_with_progress byfl-test 21 $exefile
    rm -f $cfile $exefile

    # Say what we did.
    echo "Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir."
    echo "It is now safe to delete $builddir."
    echo "Don't forget to add $byflperllib to your PERL5LIB variable."
    if [ "$gui" = yes ] ; then
        kill $zenity_pid
        zenity --info --title="Finished installation" --text="Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir.\n\nIt is now safe to delete $builddir.\nDon't forget to add $byflperllib to your PERL5LIB variable."
    fi
fi
